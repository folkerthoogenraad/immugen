using Immugen.Projects;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Security.Cryptography.X509Certificates;
using System.Text;
using System.Threading.Tasks;

namespace Immugen.Converters
{
    public class TSWriter
    {
        private int Indentations = 0;
        private bool WritenIndentations = false;
        private StringBuilder Builder;

        public TSWriter()
        {
            Builder = new StringBuilder();
        }

        public void IncreaseIndentations()
        {
            Indentations++;
        }

        public void DecreaseIndentations()
        {
            Indentations--;
        }

        public void WriteLine(string line)
        {
            Write(line);
            WriteLine();
        }

        public void CommentLine(string line)
        {
            Write("//");
            Write(line);
            WriteLine();
        }

        public void Write(string content)
        {
            if (!WritenIndentations)
            {
                WriteIndentations();
            }

            Builder.Append(content);
        }

        public void WriteLine()
        {
            Builder.AppendLine();
            WritenIndentations = false;
        }

        public void WriteIndentations()
        {
            if (WritenIndentations)
            {
                return;
            }

            WritenIndentations = true;

            for (int i = 0; i < Indentations; i++)
            {
                Builder.Append('\t');
            }
        }

        public string ToString()
        {
            return Builder.ToString();
        }
    }

    public class TSDefinitionConverter : IDefinitionConverter
    {
        public string FileExtension => "ts";

        public string Convert(Definition definition)
        {
            var writer = new TSWriter();

            writer.CommentLine("Autogenerated Typescript Definition (Immugen)");

            writer.WriteLine($"class {definition.Name} {{");
            writer.IncreaseIndentations();

            // ============================================ //
            // Write properties
            // ============================================ //
            foreach (var property in definition.Properties)
            {
                writer.WriteLine($"readonly {NameAndType(property)};");
            }
            writer.WriteLine();

            // ============================================ //
            // Write constructor
            // ============================================ //

            writer.Write("constructor(");
            writer.Write(string.Join(", ", definition.Properties.Select(property => $"{NameAndType(property)}")));
            writer.WriteLine(") {");
            writer.IncreaseIndentations();


            foreach (var property in definition.Properties)
            {
                writer.WriteLine($"this.{property.Name} = {property.Name};");
            }

            writer.DecreaseIndentations();
            writer.WriteLine("}");
            writer.WriteLine();

            // ============================================ //
            // Write setters and functions
            // ============================================ //
            foreach (var property in definition.Properties)
            {
                WriteSetter(writer, definition, property);

                if (!property.Type.IsArray)
                {
                    continue;
                }

                WriteArrayAdd(writer, definition, property);
                WriteArrayInsert(writer, definition, property);
                WriteArrayRemove(writer, definition, property);
                WriteArrayRemoveAt(writer, definition, property);
                WriteArrayReplace(writer, definition, property);
                WriteArrayReplaceAt(writer, definition, property);
            }

            writer.DecreaseIndentations();
            writer.WriteLine("}");

            return writer.ToString();
        }

        private void WriteSetter(TSWriter writer, Definition definition, Property property)
        {
            writer.WriteLine($"set{property.NamePascalCase}({NameAndType(property)}) : {definition.Name} {{");
            writer.IncreaseIndentations();

            writer.WriteLine($"return new {definition.Name}(");
            writer.IncreaseIndentations();

            for (int i = 0; i < definition.Properties.Length; i++)
            {
                // Self!
                if (definition.Properties[i] == property)
                {
                    writer.Write(property.Name);
                }
                else
                {
                    writer.Write("this.");
                    writer.Write(definition.Properties[i].Name);
                }

                if (i != definition.Properties.Length - 1)
                {
                    writer.Write(",");
                }
                writer.WriteLine();
            }

            writer.DecreaseIndentations();
            writer.WriteLine($");");

            writer.DecreaseIndentations();
            writer.WriteLine("}");
        }

        private void WriteArrayAdd(TSWriter writer, Definition definition, Property property)
        {
            writer.WriteLine($"add{property.GetElementNamePascalCase()}({NameAndType(property.GetElementName(), property.Type.ElementType)}) : {definition.Name} {{");
            writer.IncreaseIndentations();

            writer.WriteLine($"let {property.Name} = [...this.{property.Name}, {property.GetElementName()}];");

            writer.WriteLine($"return set{property.NamePascalCase}({property.Name});");

            writer.DecreaseIndentations();
            writer.WriteLine("}");
        }

        private void WriteArrayRemove(TSWriter writer, Definition definition, Property property)
        {
            writer.WriteLine($"remove{property.GetElementNamePascalCase()}({NameAndType(property.GetElementName(), property.Type.ElementType)}) : {definition.Name} {{");
            writer.IncreaseIndentations();
            
            writer.WriteLine($"let index = this.{property.Name}.indexOf({property.GetElementName()});");
            writer.WriteLine();
            writer.WriteLine($"if (index < 0) return this;");
            writer.WriteLine();

            writer.WriteLine($"let {property.Name} = [...this.{property.Name}.Slice(0, index), ...this.{property.Name}.Slice(index + 1)];");

            writer.WriteLine($"return set{property.NamePascalCase}({property.Name});");

            writer.DecreaseIndentations();
            writer.WriteLine("}");
        }

        private void WriteArrayRemoveAt(TSWriter writer, Definition definition, Property property)
        {
            writer.WriteLine($"remove{property.GetElementNamePascalCase()}At(index: number) : {definition.Name} {{");
            writer.IncreaseIndentations();

            writer.WriteLine($"if (index < 0) return this;");
            writer.WriteLine($"if (index >= this.{property.Name}.length) return this;");
            writer.WriteLine();

            writer.WriteLine($"let {property.Name} = [...this.{property.Name}.Slice(0, index), ...this.{property.Name}.Slice(index + 1)];");

            writer.WriteLine($"return set{property.NamePascalCase}({property.Name});");

            writer.DecreaseIndentations();
            writer.WriteLine("}");
        }

        private void WriteArrayInsert(TSWriter writer, Definition definition, Property property)
        {
            writer.WriteLine($"insert{property.GetElementNamePascalCase()}({NameAndType(property.GetElementName(), property.Type.ElementType)}) : {definition.Name} {{");
            writer.IncreaseIndentations();

            writer.WriteLine($"if (index < 0) return this;");
            writer.WriteLine($"if (index > this.{property.Name}.length) return this;");
            writer.WriteLine();

            writer.WriteLine($"let {property.Name} = [...this.{property.Name}.Slice(0, index), {property.GetElementName()}, ...this.{property.Name}.Slice(index)];");

            writer.WriteLine($"return set{property.NamePascalCase}({property.Name});");

            writer.DecreaseIndentations();
            writer.WriteLine("}");
        }

        private void WriteArrayReplace(TSWriter writer, Definition definition, Property property)
        {
            var oldName = "old" + property.GetElementNamePascalCase();
            var newName = "new" + property.GetElementNamePascalCase();

            writer.WriteLine($"replace{property.GetElementNamePascalCase()}({NameAndType(oldName, property.Type.ElementType)}, {NameAndType(newName, property.Type.ElementType)}) : {definition.Name} {{");
            writer.IncreaseIndentations();

            writer.WriteLine($"let index = this.{property.Name}.indexOf({oldName});");
            writer.WriteLine();
            writer.WriteLine($"if (index < 0) return this;");
            writer.WriteLine($"if (index >= this.{property.Name}.length) return this;");
            writer.WriteLine();

            writer.WriteLine($"let {property.Name} = [...this.{property.Name}.Slice(0, index), {newName}, ...this.{property.Name}.Slice(index)];");

            writer.WriteLine($"return set{property.NamePascalCase}({property.Name});");

            writer.DecreaseIndentations();
            writer.WriteLine("}");
        }

        private void WriteArrayReplaceAt(TSWriter writer, Definition definition, Property property)
        {
            writer.WriteLine($"replace{property.GetElementNamePascalCase()}At({NameAndType(property.GetElementNamePascalCase(), property.Type.ElementType)}, index: number) : {definition.Name} {{");
            writer.IncreaseIndentations();

            writer.WriteLine($"let index = this.{property.Name}.indexOf({property.GetElementNamePascalCase()});");
            writer.WriteLine();
            writer.WriteLine($"if (index < 0) return this;");
            writer.WriteLine();

            writer.WriteLine($"let {property.Name} = [...this.{property.Name}.Slice(0, index), {property.GetElementName()}, ...this.{property.Name}.Slice(index + 1)];");

            writer.WriteLine($"return set{property.NamePascalCase}({property.Name});");

            writer.DecreaseIndentations();
            writer.WriteLine("}");
        }

        public string NameAndType(Property property)
        {
            return NameAndType(property.Name, property.Type);
        }

        public string NameAndType(string name, PropertyType type)
        {
            return $"{name}: {PropertyTypeToString(type)}";
        }

        public string PropertyTypeToString(PropertyType property)
        {
            StringBuilder builder = new StringBuilder();

            builder.Append(property.Type);
            
            for(int i = 0; i < property.ArrayRank; i++)
            {
                builder.Append("[]");
            }

            return builder.ToString();
        }
    }
}
